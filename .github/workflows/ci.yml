name: Continuous Integration

on:
  workflow_dispatch: null
  push:
    branches:
      - main
  pull_request: null

jobs:
  lint-tidy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest

      - name: Run tidy
        run: make tidy

      - name: Fail if changes
        run: git diff-index --exit-code HEAD

  test:
    runs-on: ubuntu-latest
    env:
      EXIT_STATUS: 0
    steps:
      - name: Clone Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'
      - run: go version

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python deps
        run: pip3 install requests wheel boto3

      - name: Install go-junit-report
        run: go install github.com/jstemmer/go-junit-report/v2@latest

      - name: Set report filename
        run: echo "REPORT_FILENAME=$(date +'%Y%m%d%H%M')_linodego_test_report.xml" >> $GITHUB_ENV

      - name: Run tests and save test report
        run: |
          make test | go-junit-report -set-exit-code -iocopy -out $REPORT_FILENAME
        env:
          SKIP_LINT: 1

      - name: Upload test results to bucket
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && always()
        run: |
          python3 e2e_scripts/tod_scripts/xml_to_obj_storage/scripts/add_gha_info_to_xml.py \
          --branch_name "${GITHUB_REF#refs/*/}" \
          --gha_run_id "$GITHUB_RUN_ID" \
          --gha_run_number "$GITHUB_RUN_NUMBER" \
          --xmlfile "$REPORT_FILENAME"
          sync
          python3 e2e_scripts/tod_scripts/xml_to_obj_storage/scripts/xml_to_obj.py "$REPORT_FILENAME"
        env:
          LINODE_CLI_OBJ_ACCESS_KEY: ${{ secrets.LINODE_CLI_OBJ_ACCESS_KEY }}
          LINODE_CLI_OBJ_SECRET_KEY: ${{ secrets.LINODE_CLI_OBJ_SECRET_KEY }}

  notify-slack:
    runs-on: ubuntu-latest
    needs: [test]
    if: ${{ (success() || failure()) && github.ref == 'refs/heads/main' && github.event_name == 'push' && github.repository == 'linode/linodego' }}  # Run even if integration tests fail and only on main repository

    steps:
      - name: Notify Slack
        uses: slackapi/slack-github-action@v1.27.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":rocket: *${{ github.workflow }} Completed in: ${{ github.repository }}* :white_check_mark:"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Build Result:*\n${{ needs.test.result == 'success' && ':large_green_circle: Build Passed' || ':red_circle: Build Failed' }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n`${{ github.ref_name }}`"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Commit Hash:*\n<${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Run URL:*\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run Details>"
                    }
                  ]
                },
                {
                  "type": "divider"
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "Triggered by: :bust_in_silhouette: `${{ github.actor }}`"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}